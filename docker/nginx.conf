# run Nginx as a process owner (www-data)
user www-data;

worker_processes auto;

events {}
http {
  # load balancing (must be under http{} context)
  upstream downstream_services {
    # enable sticky session by creating hash table for IPs and proxy requests
    #ip_hash;

    # enable load balancing based on # of connections
    # least_conn;

    server 10.0.0.1:9090;
    server 10.0.0.2:9090;
  }

  # Define caches and its location
  # ref: https://www.nginx.com/blog/nginx-high-performance-caching/#NGINXConfig
  # proxy_cache_path /mnt/ssd/cache keys_zone=ssd_cache:10m levels=1:2 inactive=600s max_size=700m;

  # map $request_uri $cache {
  #   default ssd_cache;
  # }

  # virtual host config for HTTP
  server {
    listen 8080;

    # set domain/IP
    server_name my-service.my-company.com *.my-company.com;

    # set the root path from which a static request is being served
    root /var/www/my-company.com;

    location /404 {
        return 404 "Friendly 404 response \n";
    }

    location /healthz {
        return 200 "Hello from /healthz \n";
    }

    # reverse proxy
    location / {
        # reverse proxy: should end with trailing /
        # specify upstream name to enable load balancing
        proxy_pass http://downstream_services/;

        # set header for proxy request because add_header won't propagate to proxy header
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        # # in memory cache
        # proxy_cache $cache;
        
        # # return header attributes
        # add_header Cache-Control public;
        # add_header Pragma public;
        # add_header Vary Accept-Encoding;
        # expires 60m;
    }
  }

  server {
    listen 8081;

    # rewrite a request to / to /nginx_status
    rewrite ^/ /nginx_status;
    
    # stub status - this will be exposed so other monitoring solution like Prometheus can scrape data
    # for example, we could use NGINX Prometheus Exporter (https://github.com/nginxinc/nginx-prometheus-exporter)
    location /nginx_status {
        stub_status;
    }
  }
}