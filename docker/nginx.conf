# run Nginx as a process owner (www-data)
user www-data;

worker_processes auto;

events {}
http {
  # load balancing with round-robin as default algorithm (must be under http{} context)
  upstream downstream_services {
    # enable sticky session by creating hash table for IPs and proxy requests
    #ip_hash;

    # enable load balancing based on # of connections
    # least_conn;

    server 10.0.0.1:9090;
    server 10.0.0.2:9090;
  }

  # Define in-memory caches and its location
  proxy_cache_path /tmp/nginx_proxy_cache keys_zone=proxy_cache_zone:10m levels=1:2 inactive=600s max_size=700m;

  # custom log format for third-party monitoring
  log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$host" sn="$server_name" ' 'rt=$request_time '
                      'ua="$upstream_addr" us="$upstream_status" '
                      'ut="$upstream_response_time" ul="$upstream_response_length" '
                      'cs=$upstream_cache_status' ;
  access_log /var/log/nginx/access.log main_ext;
  error_log /var/log/nginx/error.log warn;

  # virtual host config for HTTP
  server {
    listen 8080;

    # set domain/IP
    server_name my-service.my-company.com *.my-company.com;

    # set the root path from which a static request is being served
    root /var/www/my-company.com;

    # enable in-memory cache for all endpoints
    # ref: http://czerasz.com/2015/03/30/nginx-caching-tutorial/
    proxy_cache proxy_cache_zone;
    proxy_cache_valid 200 10m;
    proxy_cache_methods GET HEAD;
    # indicator as to whether the client is explicitly requesting a fresh, non-cached version of the resource.
    proxy_cache_bypass $http_cache_control;
    add_header X-Cache $upstream_cache_status;

    location /404 {
        return 404 "Friendly 404 response \n";
    }

    location /healthz {
        return 200 "Hello from /healthz \n";
    }

    # reverse proxy
    location / {
        # reverse proxy: should end with trailing /
        # specify upstream name to enable load balancing
        proxy_pass http://downstream_services/;

        # set header for proxy request because add_header won't propagate to proxy header
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }

  server {
    listen 8081;

    # rewrite a request to / to /nginx_status
    rewrite ^/ /nginx_status;
    
    # stub status - this will be exposed so other monitoring solution like Prometheus can scrape data
    # for example, we could use NGINX Prometheus Exporter (https://github.com/nginxinc/nginx-prometheus-exporter)
    location /nginx_status {
        stub_status;
    }
  }
}